bad.clusters=c(bad.clusters,k)
bad.cells=c(bad.cells,which(mycl==k))
}
}
if (length(bad.clusters)>0){
indexes=indexes[-bad.clusters]
mycl=rep(0,length(mycl))
for (k in 1:length(indexes))
mycl[indexes[[k]]]=k
warning(sprintf('Hidden %g clusters of %g cells total to be used: they are too small',length(bad.clusters),length(bad.cells)))
}
# Warning message: Hidden 2 clusters of 6 cells total to be used: they are too small
if (create.distances==FALSE)
D.final=NA
#return(list(mycl=mycl,D=D.final))
}
#filtering the number of genes
pass.cutoff=which(tot.cells>(max(15,ncol(expr.data.norm)*0.005)))
#pass.cutoff=which(tot.cells>0)
gene.names=gene.names[pass.cutoff]
clustering
print(sprintf('Calculating Zscores for %g genes expressed in at least %g cells',length(pass.cutoff),max(15,ncol(expr.data.norm)*0.005)))
Mscores=calculate.marker.scores(expr.norm = expr.data.norm[pass.cutoff,], clusters=mycl, N_pct=model, edges = edges, lib.size = lib.size, speed.preset = speed.preset)$Mscores
dim(Mscores)
Mscores
Mscores[[1]]
tot.scores=matrix(0,length(Mscores[[1,2]]),(tot.clusters*(tot.clusters-1)/2))
# assembling the matrix of Mscores
counts=1
for (k in 1:(tot.clusters-1))
for (h in (k+1):tot.clusters)
{
tot.scores[,counts]=Mscores[[k,h]]
counts=counts+1
}
# default clustering='recursive'
if (clustering=="direct"){
print(sprintf('Assembling cluster average expression for %g genes expressed in at least %g cells',length(pass.cutoff),max(15,ncol(expr.data.norm)*0.005)))
tot.scores=matrix(0,length(pass.cutoff),tot.clusters)
for (k in 1:(tot.clusters))
tot.scores[,k]=Rfast::rowmeans(as.matrix(expr.data.norm[pass.cutoff,which(mycl==k)]))
tot.scores=log2(tot.scores+1)
}else{
print(sprintf('Calculating Zscores for %g genes expressed in at least %g cells',length(pass.cutoff),max(15,ncol(expr.data.norm)*0.005)))
Mscores=calculate.marker.scores(expr.norm = expr.data.norm[pass.cutoff,], clusters=mycl, N_pct=model, edges = edges, lib.size = lib.size, speed.preset = speed.preset)$Mscores
dim(Mscores)
rm(expr.data.norm)
gc()
tot.scores=matrix(0,length(Mscores[[1,2]]),(tot.clusters*(tot.clusters-1)/2))
# assembling the matrix of Mscores
counts=1
for (k in 1:(tot.clusters-1))
for (h in (k+1):tot.clusters)
{
tot.scores[,counts]=Mscores[[k,h]]
counts=counts+1
}
}
tot.scores=t(tot.scores)
# prepare the test df.expr data
options(device = 'quartz',stringsAsFactors = F)
#source('../modify_bigScale2/ming-Functions-v1.R') #gene 15 or 0.5perc cutoff in each cell type
#source('../modify_bigScale2/ming-Functions-v2.R') #turn off gene 15 or 0.5perc cutoff in each cell type
if(F){
# if cal Mscores in 'fast', do not Rcpp
library(Rcpp)
#$cat ~/.R/Makevars
#evalCpp("1 + 1", showOutput= TRUE)
sourceCpp("../../../modify_bigScale2/src/rcpp_hello_world.cpp")
sourceCpp("../../../modify_bigScale2/src/de.cpp")
sourceCpp("../../../modify_bigScale2/src/dist_icells.cpp")
sourceCpp("../../../modify_bigScale2/src/dist.cpp")
sourceCpp("../../../modify_bigScale2/src/RcppExports.cpp")
}
library(Seurat)
library(tidyverse)
library(Matrix);library(fst)
library(ggplot2);library(gridExtra)
library(RColorBrewer)
path='./';
## read in processed wholebrain data
file="../data/wholebrain_filtered.rds";
dat=readRDS(file);
df.expr0=dat@assays$RNA@counts #12616 features across 100527 samples
# keep female cells
table(dat@meta.data$sex)
i=dat@meta.data$sex=='male'
sum(i) #47409 male cells
df.expr=df.expr0[,i]
dat@meta.data=dat@meta.data[i,]
dim(df.expr)
dim(dat@meta.data)
sum(colnames(df.expr)==rownames(dat@meta.data))
# plot #cell over cell types
cell.types=scan('../common.expr.genes/cell.types.at.least.200_both.sex.txt',what='',sep='\t')
length(cell.types) #24 cell types
cell.type=cell.types[4] #test one cell type first,alpha-beta Kenyon cell
df=df.expr[,dat@meta.data$annotation==cell.type];
dim(df); #gene by cell, 12616 genes X 244 cells
# two things enter next stage
gene.names=rownames(df) #vector
expr.data=df #dgCMatrix geneXcell
#net.out=compute.network(expr.data = expr.data,gene.names = gene.names,speed.preset = "fast")
######################################################
# start debug with  compute.network() function
expr.data = expr.data;gene.names = gene.names;speed.preset = "fast"
modality='pca';model=NA;clustering='recursive';quantile.p=0.9;previous.output=NA
expr.data=as.matrix(expr.data)
# Part 1) Initial processing of the dataset  ************************************************************
print('Pre-processing) Removing null rows ')
exp.genes=which(Rfast::rowsums(expr.data)>0)
if ((nrow(expr.data)-length(exp.genes))>0)
print(sprintf("Discarding %g genes with all zero values",nrow(expr.data)-length(exp.genes)))
expr.data=expr.data[exp.genes,]
gc()
gene.names=gene.names[exp.genes]
tot.cells=Rfast::rowsums(expr.data>0)
print('PASSAGE 1) Setting the size factors ....')
lib.size = Rfast::colsums(expr.data)
print('PASSAGE 2) Setting the bins for the expression data ....')
edges=generate.edges(expr.data)
print('PASSAGE 3) Storing in the single cell object the Normalized data ....')
avg.library.size=mean(lib.size)
for (k in 1:ncol(expr.data)) expr.data[,k]=expr.data[,k]/lib.size[k]*avg.library.size
expr.data.norm=expr.data
rm(expr.data)
expr.data.norm=Matrix::Matrix(expr.data.norm)
gc()
# this fit.model step takes 2mins
if (!(modality=='pca' & clustering=='direct'))
{
print('PASSAGE 4) Computing the numerical model (can take from a few minutes to 30 mins) ....')
model=fit.model(expr.data.norm,edges,lib.size)$N_pct
gc()
}
# default clustering=="recursive" take 2mins
print('PASSAGE 5) Clustering ...')
if (clustering=="direct" | clustering=="recursive")
{
if (clustering=="direct")
mycl=bigscale.recursive.clustering(expr.data.norm = expr.data.norm,model = model,edges = edges,lib.size = lib.size,fragment=TRUE,modality=modality)$mycl
if (clustering=="recursive")
mycl=bigscale.recursive.clustering(expr.data.norm = expr.data.norm,model = model,edges = edges,lib.size = lib.size,modality=modality)$mycl
}
tot.clusters=max(mycl)
# this step generate warning message like this
#5: In mycl.new[which(mycl == k)] <- temp.clusters + max(mycl.new) :
#  number of items to replace is not a multiple of replacement length
#6: In bigscale.recursive.clustering(expr.data.norm = expr.data.norm,  :
#  Hidden 2 clusters of 6 cells total to be used: they are too small
# would get back to this step soon
{
# deal with bigscale.recursive.clustering() function
# input paramters
expr.data.norm = expr.data.norm;model = model;edges = edges;lib.size = lib.size;modality=modality
fragment=FALSE;create.distances=FALSE;
num.samples=ncol(expr.data.norm)
if (fragment==FALSE){
# Adjusting max_group_size according to cell number
if (num.samples<1000) dim.cutoff=10
if (num.samples>=1000 & num.samples<5000) dim.cutoff=50
if (num.samples>=5000 & num.samples<10000) dim.cutoff=100
if (num.samples>=10000) dim.cutoff=150
}
print(sprintf('Clustering cells down to groups of approximately %g-%g cells',dim.cutoff,dim.cutoff*5))
#dim.cutoff=ncol(expr.data.norm)*min.group.size
mycl=rep(1,ncol(expr.data.norm))
tot.recursive=1
#current.cutting=40
unclusterable=rep(0,length(mycl))
while(1){
cat(sprintf('\nRecursive clustering, beginning round %g ....',tot.recursive))
action.taken=0
mycl.new=rep(0,length(mycl)) #number of cells, mycl update in each loop
cat('tot.recursive',tot.recursive,', max(mycl)',max(mycl))
for (k in 1:max(mycl)){
#in this for loop, mycl remain the same, mycl.new change
#print(sprintf('Checking cluster %g/%g, %g cells',k,max(mycl),length(which(mycl==k))))
cat('length(which(mycl==k))=',length(which(mycl==k)),
' sum(unclusterable[which(mycl==k)])=', sum(unclusterable[which(mycl==k)]),'\n');
if (length(which(mycl==k))>dim.cutoff & sum(unclusterable[which(mycl==k)])==0 ) # then it must be re-clustered
{
#print('Computing Overdispersed genes ...')
ODgenes=calculate.ODgenes(expr.data.norm[,which(mycl==k)],verbose = FALSE,min_ODscore = 2)
if (is.null(ODgenes)){
D=NA
unclusterable[which(mycl==k)]=1
}else{
dummy=as.matrix(ODgenes[[1]])
ODgenes=which(dummy[,1]==1)
#print('Computing distances ...')
D=compute.distances(expr.norm = expr.data.norm[,which(mycl==k)],N_pct = model,edges = edges,driving.genes = ODgenes,lib.size = lib.size[which(mycl==k)],modality=modality)
temp.clusters=bigscale.cluster(D,plot.clusters = FALSE,clustering.method = 'low.granularity',granularity.size=dim.cutoff,verbose=FALSE)$clusters #cut.depth=current.cutting,method.treshold = 0.2
if (max(temp.clusters)>1)
action.taken=1
else
unclusterable[which(mycl==k)]=1
}
#print(sprintf('Partitioned cluster %g/%g in %g sub clusters ...',k,max(mycl),max(temp.clusters)))
if(length(mycl.new[which(mycl==k)])!=length(temp.clusters+max(mycl.new))){
cat('tot.recursive',tot.recursive,',at step',k,'unequal length\n');
#break
}
if (is.null(ODgenes)){mycl.new[which(mycl==k)]=1+max(mycl.new)}
else{ mycl.new[which(mycl==k)]=temp.clusters+max(mycl.new) }
# the warnings in this while(1) loop stems from the above code
# the reason is: when 'is.null(ODgenes)' happens,
# no 'temp.clusters' is calcualted, so previous temp.clusters is used
# #cell differ between k at 2 and k at 3
# adding 'the if.null(OD)'if (is.null(ODgenes)){mycl.new[which(mycl==k)]=1+max(mycl.new)}'
# fix things
}else{
#print(sprintf('Cluster %g/%g is of size %g and cannot be further partitioned',k,max(mycl),length(which(mycl==k))))
mycl.new[which(mycl==k)]=1+max(mycl.new)
}
# for k loop
}
tot.recursive=tot.recursive+1
cat(sprintf('\nRecursive clustering, after round %g obtained %g clusters',tot.recursive,max(mycl.new)))
if (action.taken==0){break
}else{
mycl=mycl.new
}
#if(tot.recursive==5) break
}
# warnings in this while(1) loop
# Preventing small clusters to be used, with a ugly trick
bad.cells=c()
bad.clusters=c()
indexes=list()
for (k in 1:max(mycl))
{
indexes[[k]]=which(mycl==k)
if (length(which(mycl==k))<5)
{
bad.clusters=c(bad.clusters,k)
bad.cells=c(bad.cells,which(mycl==k))
}
}
if (length(bad.clusters)>0){
indexes=indexes[-bad.clusters]
mycl=rep(0,length(mycl))
for (k in 1:length(indexes))
mycl[indexes[[k]]]=k
warning(sprintf('Hidden %g clusters of %g cells total to be used: they are too small',length(bad.clusters),length(bad.cells)))
}
# Warning message: Hidden 2 clusters of 6 cells total to be used: they are too small
if (create.distances==FALSE)
D.final=NA
#return(list(mycl=mycl,D=D.final))
}
#filtering the number of genes
pass.cutoff=which(tot.cells>(max(15,ncol(expr.data.norm)*0.005)))
#pass.cutoff=which(tot.cells>0)
gene.names=gene.names[pass.cutoff]
clustering
print(sprintf('Calculating Zscores for %g genes expressed in at least %g cells',length(pass.cutoff),max(15,ncol(expr.data.norm)*0.005)))
Mscores=calculate.marker.scores(expr.norm = expr.data.norm[pass.cutoff,], clusters=mycl, N_pct=model, edges = edges, lib.size = lib.size, speed.preset = speed.preset)$Mscores
Mscores[[1,2]]
dim(Mscores[[1,2]])
length(Mscores[[1,2]])
tot.clusters
# prepare the test df.expr data
options(device = 'quartz',stringsAsFactors = F)
#source('../modify_bigScale2/ming-Functions-v1.R') #gene 15 or 0.5perc cutoff in each cell type
#source('../modify_bigScale2/ming-Functions-v2.R') #turn off gene 15 or 0.5perc cutoff in each cell type
source('../modify_bigScale2/ming-Functions-v3.R') #turn on gene 15 or 0.5perc cutoff in each cell type
# prepare the test df.expr data
options(device = 'quartz',stringsAsFactors = F)
#source('../modify_bigScale2/ming-Functions-v1.R') #gene 15 or 0.5perc cutoff in each cell type
#source('../modify_bigScale2/ming-Functions-v2.R') #turn off gene 15 or 0.5perc cutoff in each cell type
source('../modify_bigScale2/ming-Functions-v3.R') #turn on gene 15 or 0.5perc cutoff in each cell type
if(F){
# if cal Mscores in 'fast', do not Rcpp
library(Rcpp)
#$cat ~/.R/Makevars
#evalCpp("1 + 1", showOutput= TRUE)
sourceCpp("../../../modify_bigScale2/src/rcpp_hello_world.cpp")
sourceCpp("../../../modify_bigScale2/src/de.cpp")
sourceCpp("../../../modify_bigScale2/src/dist_icells.cpp")
sourceCpp("../../../modify_bigScale2/src/dist.cpp")
sourceCpp("../../../modify_bigScale2/src/RcppExports.cpp")
}
library(Seurat)
library(tidyverse)
library(Matrix);library(fst)
library(ggplot2);library(gridExtra)
library(RColorBrewer)
path='./';
## read in processed wholebrain data
file="../data/wholebrain_filtered.rds";
dat=readRDS(file);
df.expr0=dat@assays$RNA@counts #12616 features across 100527 samples
# keep female cells
table(dat@meta.data$sex)
i=dat@meta.data$sex=='male'
sum(i) #47409 male cells
df.expr=df.expr0[,i]
dat@meta.data=dat@meta.data[i,]
dim(df.expr)
dim(dat@meta.data)
sum(colnames(df.expr)==rownames(dat@meta.data))
# plot #cell over cell types
cell.types=scan('../common.expr.genes/cell.types.at.least.200_both.sex.txt',what='',sep='\t')
length(cell.types) #24 cell types
cell.type=cell.types[4] #test one cell type first,alpha-beta Kenyon cell
df=df.expr[,dat@meta.data$annotation==cell.type];
dim(df); #gene by cell, 12616 genes X 244 cells
# two things enter next stage
gene.names=rownames(df) #vector
expr.data=df #dgCMatrix geneXcell
#net.out=compute.network(expr.data = expr.data,gene.names = gene.names,speed.preset = "fast")
######################################################
# start debug with  compute.network() function
expr.data = expr.data;gene.names = gene.names;speed.preset = "fast"
modality='pca';model=NA;clustering='recursive';quantile.p=0.9;previous.output=NA
expr.data=as.matrix(expr.data)
# Part 1) Initial processing of the dataset  ************************************************************
print('Pre-processing) Removing null rows ')
exp.genes=which(Rfast::rowsums(expr.data)>0)
if ((nrow(expr.data)-length(exp.genes))>0)
print(sprintf("Discarding %g genes with all zero values",nrow(expr.data)-length(exp.genes)))
expr.data=expr.data[exp.genes,]
gc()
gene.names=gene.names[exp.genes]
tot.cells=Rfast::rowsums(expr.data>0)
print('PASSAGE 1) Setting the size factors ....')
lib.size = Rfast::colsums(expr.data)
print('PASSAGE 2) Setting the bins for the expression data ....')
edges=generate.edges(expr.data)
print('PASSAGE 3) Storing in the single cell object the Normalized data ....')
avg.library.size=mean(lib.size)
for (k in 1:ncol(expr.data)) expr.data[,k]=expr.data[,k]/lib.size[k]*avg.library.size
expr.data.norm=expr.data
rm(expr.data)
expr.data.norm=Matrix::Matrix(expr.data.norm)
gc()
# this fit.model step takes 2mins
if (!(modality=='pca' & clustering=='direct'))
{
print('PASSAGE 4) Computing the numerical model (can take from a few minutes to 30 mins) ....')
model=fit.model(expr.data.norm,edges,lib.size)$N_pct
gc()
}
# default clustering=="recursive" take 2mins
print('PASSAGE 5) Clustering ...')
if (clustering=="direct" | clustering=="recursive")
{
if (clustering=="direct")
mycl=bigscale.recursive.clustering(expr.data.norm = expr.data.norm,model = model,edges = edges,lib.size = lib.size,fragment=TRUE,modality=modality)$mycl
if (clustering=="recursive")
mycl=bigscale.recursive.clustering(expr.data.norm = expr.data.norm,model = model,edges = edges,lib.size = lib.size,modality=modality)$mycl
}
tot.clusters=max(mycl)
# this step generate warning message like this
#5: In mycl.new[which(mycl == k)] <- temp.clusters + max(mycl.new) :
#  number of items to replace is not a multiple of replacement length
#6: In bigscale.recursive.clustering(expr.data.norm = expr.data.norm,  :
#  Hidden 2 clusters of 6 cells total to be used: they are too small
# would get back to this step soon
if(F){
# deal with bigscale.recursive.clustering() function
# input paramters
expr.data.norm = expr.data.norm;model = model;edges = edges;lib.size = lib.size;modality=modality
fragment=FALSE;create.distances=FALSE;
num.samples=ncol(expr.data.norm)
if (fragment==FALSE){
# Adjusting max_group_size according to cell number
if (num.samples<1000) dim.cutoff=10
if (num.samples>=1000 & num.samples<5000) dim.cutoff=50
if (num.samples>=5000 & num.samples<10000) dim.cutoff=100
if (num.samples>=10000) dim.cutoff=150
}
print(sprintf('Clustering cells down to groups of approximately %g-%g cells',dim.cutoff,dim.cutoff*5))
#dim.cutoff=ncol(expr.data.norm)*min.group.size
mycl=rep(1,ncol(expr.data.norm))
tot.recursive=1
#current.cutting=40
unclusterable=rep(0,length(mycl))
while(1){
cat(sprintf('\nRecursive clustering, beginning round %g ....',tot.recursive))
action.taken=0
mycl.new=rep(0,length(mycl)) #number of cells, mycl update in each loop
cat('tot.recursive',tot.recursive,', max(mycl)',max(mycl))
for (k in 1:max(mycl)){
#in this for loop, mycl remain the same, mycl.new change
#print(sprintf('Checking cluster %g/%g, %g cells',k,max(mycl),length(which(mycl==k))))
cat('length(which(mycl==k))=',length(which(mycl==k)),
' sum(unclusterable[which(mycl==k)])=', sum(unclusterable[which(mycl==k)]),'\n');
if (length(which(mycl==k))>dim.cutoff & sum(unclusterable[which(mycl==k)])==0 ) # then it must be re-clustered
{
#print('Computing Overdispersed genes ...')
ODgenes=calculate.ODgenes(expr.data.norm[,which(mycl==k)],verbose = FALSE,min_ODscore = 2)
if (is.null(ODgenes)){
D=NA
unclusterable[which(mycl==k)]=1
}else{
dummy=as.matrix(ODgenes[[1]])
ODgenes=which(dummy[,1]==1)
#print('Computing distances ...')
D=compute.distances(expr.norm = expr.data.norm[,which(mycl==k)],N_pct = model,edges = edges,driving.genes = ODgenes,lib.size = lib.size[which(mycl==k)],modality=modality)
temp.clusters=bigscale.cluster(D,plot.clusters = FALSE,clustering.method = 'low.granularity',granularity.size=dim.cutoff,verbose=FALSE)$clusters #cut.depth=current.cutting,method.treshold = 0.2
if (max(temp.clusters)>1)
action.taken=1
else
unclusterable[which(mycl==k)]=1
}
#print(sprintf('Partitioned cluster %g/%g in %g sub clusters ...',k,max(mycl),max(temp.clusters)))
if(length(mycl.new[which(mycl==k)])!=length(temp.clusters+max(mycl.new))){
cat('tot.recursive',tot.recursive,',at step',k,'unequal length\n');
#break
}
if (is.null(ODgenes)){mycl.new[which(mycl==k)]=1+max(mycl.new)}
else{ mycl.new[which(mycl==k)]=temp.clusters+max(mycl.new) }
# the warnings in this while(1) loop stems from the above code
# the reason is: when 'is.null(ODgenes)' happens,
# no 'temp.clusters' is calcualted, so previous temp.clusters is used
# #cell differ between k at 2 and k at 3
# adding 'the if.null(OD)'if (is.null(ODgenes)){mycl.new[which(mycl==k)]=1+max(mycl.new)}'
# fix things
}else{
#print(sprintf('Cluster %g/%g is of size %g and cannot be further partitioned',k,max(mycl),length(which(mycl==k))))
mycl.new[which(mycl==k)]=1+max(mycl.new)
}
# for k loop
}
tot.recursive=tot.recursive+1
cat(sprintf('\nRecursive clustering, after round %g obtained %g clusters',tot.recursive,max(mycl.new)))
if (action.taken==0){break
}else{
mycl=mycl.new
}
#if(tot.recursive==5) break
}
# warnings in this while(1) loop
# Preventing small clusters to be used, with a ugly trick
bad.cells=c()
bad.clusters=c()
indexes=list()
for (k in 1:max(mycl))
{
indexes[[k]]=which(mycl==k)
if (length(which(mycl==k))<5)
{
bad.clusters=c(bad.clusters,k)
bad.cells=c(bad.cells,which(mycl==k))
}
}
if (length(bad.clusters)>0){
indexes=indexes[-bad.clusters]
mycl=rep(0,length(mycl))
for (k in 1:length(indexes))
mycl[indexes[[k]]]=k
warning(sprintf('Hidden %g clusters of %g cells total to be used: they are too small',length(bad.clusters),length(bad.cells)))
}
# Warning message: Hidden 2 clusters of 6 cells total to be used: they are too small
if (create.distances==FALSE)
D.final=NA
#return(list(mycl=mycl,D=D.final))
}
#filtering the number of genes
pass.cutoff=which(tot.cells>(max(15,ncol(expr.data.norm)*0.005)))
#pass.cutoff=which(tot.cells>0)
gene.names=gene.names[pass.cutoff]
# default clustering='recursive'
if (clustering=="direct"){
print(sprintf('Assembling cluster average expression for %g genes expressed in at least %g cells',length(pass.cutoff),max(15,ncol(expr.data.norm)*0.005)))
tot.scores=matrix(0,length(pass.cutoff),tot.clusters)
for (k in 1:(tot.clusters))
tot.scores[,k]=Rfast::rowmeans(as.matrix(expr.data.norm[pass.cutoff,which(mycl==k)]))
tot.scores=log2(tot.scores+1)
}else{
print(sprintf('Calculating Zscores for %g genes expressed in at least %g cells',length(pass.cutoff),max(15,ncol(expr.data.norm)*0.005)))
Mscores=calculate.marker.scores(expr.norm = expr.data.norm[pass.cutoff,], clusters=mycl, N_pct=model, edges = edges, lib.size = lib.size, speed.preset = speed.preset)$Mscores
dim(Mscores);length(Mscores[[1,2]]) #1866 genes
rm(expr.data.norm)
gc()
tot.scores=matrix(0,length(Mscores[[1,2]]),(tot.clusters*(tot.clusters-1)/2))
# assembling the matrix of Mscores
counts=1
for (k in 1:(tot.clusters-1))
for (h in (k+1):tot.clusters)
{
tot.scores[,counts]=Mscores[[k,h]]
counts=counts+1
}
}
tot.scores=t(tot.scores)
dim(tot.scores)
head(tot.scores)
dim(tot.scores)
tot.scores[,1:3]
sum(is.na(tot.scores))
Dp=Rfast::cora(tot.scores)
print('Calculating Spearman ...')
Ds=cor(x = tot.scores,method = "spearman")
sum(is.na(Dp))
i=which(is.na(Dp),arr.ind = T)
head(i)
dim(i)
Dp[1170,]
tot.scores[,1170]
unique(i[,1])
head(i)
i[,1]
table(i[,1])
head(i)
tail(i)
head(i)
tail(i)
head(i)
head(i,10)

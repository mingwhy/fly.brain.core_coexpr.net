which(i==2)
names(which(i==2))
setwd("~/Documents/fly.brain_core.module/00.data_preprocess")
library(Seurat)
library(ggplot2);library(gridExtra);
options(stringsAsFactors = F)
out.dir1='brain_scRNA-seq/';
#out.dir1='brain_snRNA-seq_n5c0.05/';
#out.dir1='brain_snRNA-seq_n10c0.1/';
if(!dir.exists(out.dir1)) dir.create(out.dir1)
## read in processed wholebrain data
if(length(grep('sn',out.dir1))==1){
file="../../single.cell_datasets/FCA_head/whole_head_filtered_valid.rds";
}else{
file="../../single.cell_datasets/fly.brain.atlas/wholebrain_filtered_valid.rds";
}
dat=readRDS(file);
#dat=NormalizeData(dat);
#df.umi=dat@assays$RNA@counts #12094 features across 56192 samples within 1 assay
df.expr=dat@assays$RNA@data #logNormal
unique(dat@meta.data$sex)
table(dat@meta.data$annotation)
## separate female and male, select cell clusters that contain>=500cells in both sexes
min.cell=200;max.cell=Inf;
i=apply(table(dat$sex,dat$annotation),2,function(i)sum(i>=min.cell & i<max.cell))
pick.cell.clusters=names(which(i>=1)) #79
200*0.1
## separate female and male, select cell clusters that contain>=500cells in both sexes
min.cell=100;max.cell=Inf;
i=apply(table(dat$sex,dat$annotation),2,function(i)sum(i>=min.cell & i<max.cell))
pick.cell.clusters=names(which(i==2)) #79
pick.cell.clusters #sn,54; sc,60.
length(i)
setwd("~/Documents/fly.brain_core.module/02.coexpr_net")
# construct pairwise gene Pearson's correlation matrix for each cell type
# the bigScale2 algorithm was published in: Iacono, Giovanni, Ramon Massoni-Badosa, and Holger Heyn. "Single-cell transcriptomics unveils gene regulatory network plasticity." Genome biology 20, no. 1 (2019): 1-20.
# the source code can be found: https://github.com/iaconogi/bigSCale2
# I modify the original 'Functions.R' script to output and save Pearson's correlation matrix.
source('../01.metric_consistency/cal_bigScale2.R');
library(Seurat)
library(tidyverse)
library(Matrix);l
library(ggplot2);library(gridExtra)
library(RColorBrewer)
#genes=readRDS('../00.data_preprocess/brain_scRNA-seq/all_common_genes.rds')
genes=readRDS('../00.data_preprocess/brain_snRNA-seq_n5c0.05/all_common_genes.rds')
common.genes=genes$common.genes
#out.dir1='brain_scRNA-seq/';
out.dir1='brain_snRNA-seq_n5c0.05/';
#out.dir1='brain_snRNA-seq_n10c0.1/';
if(!dir.exists(out.dir1)) dir.create(out.dir1)
out.dir=paste0(out.dir1,'/bigScale2_coexpr/');
if(!dir.exists(out.dir)) dir.create(out.dir)
## read in processed wholebrain data
if(length(grep('sn',out.dir1))==1){
file="../../single.cell_datasets/FCA_head/whole_head_filtered_valid.rds";
}else{
file="../../single.cell_datasets/fly.brain.atlas/wholebrain_filtered_valid.rds";
}
dat=readRDS(file);
df.expr=dat@assays$RNA@data
## separate female and male, select cell clusters that contain>=500cells in both sexes
min.cell=100;max.cell=Inf; #separate sex
i=apply(table(dat$sex,dat$annotation),2,function(i)sum(i>=min.cell & i<max.cell))
pick.cell.clusters=names(which(i==2))
pick.cell.clusters # cell_100: sn,54; sc,60.
dat=subset(dat,annotation %in% pick.cell.clusters)
df.expr=dat@assays$RNA@counts;
dim(df.expr); #sn:12602 50588
sparsity=sum(df.expr==0)/nrow(df.expr)/ncol(df.expr)
cat(out.dir,sparsity,'\n') #sn=0.9537,sc=0.9055
## network construction begin
## effective.expressed.gene >=1umi in max(10,ncell*10%) cells
cluster.info=list();
for(i.sex in c('male','female')){
for(i.cluster in pick.cell.clusters){
mat=df.expr[,dat$sex==i.sex & dat$annotation==i.cluster]
gene.filter=rownames(mat) %in% common.genes;
mat=mat[gene.filter,]
ncell=ncol(mat)
i.cluster2=gsub('\\/','\\.',i.cluster)#there is _ and -, use . to replace /
out.file=paste0(out.dir1,'/ncell_',ncell,'_',i.sex,'_',i.cluster2,'_pearson.rds')
if(!file.exists(out.file)){
# two things enter next stage
gene.names=rownames(mat) #vector
expr.data=mat #dgCMatrix geneXcell
net.out=compute.network(expr.data = expr.data,gene.names = gene.names,speed.preset = "fast")
x=paste0('ncell_',ncell,'_',i.sex,'_',i.cluster);
cluster.info[[x]]=net$clusters
#Dp=net.out$Dp.mat;
#Ds=net.out$Ds.mat;
saveRDS(net.out$Dp.mat,out.file);
}
cat('cell.cluster',i.cluster,'done\n')
}
}
saveRDS(cluster.info,paste0(out.dir1,'/bigScale2_cluster.info.rds'))
## network construction begin
## effective.expressed.gene >=1umi in max(10,ncell*10%) cells
cluster.info=list();
for(i.sex in c('male','female')){
for(i.cluster in pick.cell.clusters){
mat=df.expr[,dat$sex==i.sex & dat$annotation==i.cluster]
gene.filter=rownames(mat) %in% common.genes;
mat=mat[gene.filter,]
ncell=ncol(mat)
i.cluster2=gsub('\\/','\\.',i.cluster)#there is _ and -, use . to replace /
out.file=paste0(out.dir1,'/ncell_',ncell,'_',i.sex,'_',i.cluster2,'_pearson.rds')
if(!file.exists(out.file)){
# two things enter next stage
gene.names=rownames(mat) #vector
expr.data=mat #dgCMatrix geneXcell
net.out=compute.network(expr.data = expr.data,gene.names = gene.names,speed.preset = "fast")
x=paste0('ncell_',ncell,'_',i.sex,'_',i.cluster);
cluster.info[[x]]=net.out$clusters
#Dp=net.out$Dp.mat;
#Ds=net.out$Ds.mat;
saveRDS(net.out$Dp.mat,out.file);
}
cat('cell.cluster',i.cluster,'done\n')
}
}
saveRDS(cluster.info,paste0(out.dir1,'/bigScale2_cluster.info.rds'))
setwd("~/Documents/fly.brain_core.module/03.top.perc_net")
# plot pearson.corr.coeff distribution for each cell type
# use different top percentile cutoffs on absolute values of pearson.cor.matrix
# to get cell type-specific gene co-expression networks
library(Matrix);library(tidyverse)
library(ggplot2);library(gridExtra)
library(RColorBrewer)
topn.list=c(0.005,0.01,0.05,0.1,0.3,0.5,0.7)
#path.in='../02.coexpr_net/brain_scRNA-seq/bigScale2_coexpr/';
#path='./brain_scRNA-seq_bigScale2/';
#path.in='../03.coexpr_net/brain_scRNA-seq/pearson_coexpr/';
#path='./brain_scRNA-seq/';
path.in='../03.coexpr_net/brain_snRNA-seq_n5c0.05/bigScale2_coexpr/';
path='./brain_snRNA-seq_n5c0.05_bigScale2/'
dir.create(path)
# collect bigscale output nets
(files=Sys.glob(paste0(path.in,'/*.rds')))
cor.list=list()
for(i in 1:length(files)){
filename=files[i]
x=strsplit(basename(filename),'\\_|.rds')[[1]]
sex=x[3]
cell.cluster=x[4]
cat('cell.cluster',sex,cell.cluster,'\n')
name=paste0(sex,'_',cell.cluster)
Dp=readRDS(files[i])
cor.list[[name]]<-Dp;
cat('cell.type',name,'is done\n')
}
sapply(cor.list,dim)
# get the the corresponding abs(pearson.cor.coeff) value for each top percentile cutoff
# save result in a data.frame: cell.type, topN, cutoff.value, ngene, nedge
# one data.frame for one cell.type
names(cor.list)
for(cutoff in topn.list){
(out.file=paste0(path,'/top_',cutoff,'_networks_cutoff_cell.type.rds'))
topn.out=c();
if(!file.exists(out.file)){
keep.list=list();
for(cell.type in names(cor.list)){
## remember it's absolute pearson.cor.coeff values
#abs.cor=abs(cor2.list[[cell.type]])
abs.cor=abs(cor.list[[cell.type]])
abs.cor[is.na(abs.cor)]=0;
all.cor=abs.cor[upper.tri(abs.cor)]
all.ngene=nrow(abs.cor);
all.nedge=length(all.cor);
(cutoff.value=quantile(all.cor,1-cutoff))
#(cutoff.value=sort(all.cor,decreasing = T)[cutoff])
cat('cell.type',cell.type,'top',cutoff,'value',cutoff.value,'\n')
tmp=abs.cor
tmp[abs.cor>=cutoff.value]=1;
tmp[abs.cor<cutoff.value]=0;
keep.list[[cell.type]]=tmp;
diag(tmp)=0
gene.degree=apply(tmp,1,sum)
ngene=length(gene.degree)-sum(gene.degree==0)
nedge=sum(tmp)/2 #symmetric matrix
#cell.type, topN, cutoff.value, ngene, nedge
x=c(cell.type,all.ngene,all.nedge,cutoff,cutoff.value,ngene,nedge);
topn.out=rbind(topn.out,x);
}
colnames(topn.out)=c('cell.type','all.ngene','all.nedge','topN.cutoff','cutoff.value','ngene','nedge')
write.table(topn.out,paste0(path,'/top_',cutoff,"_cor.value.txt"),quote=F,row.names = F)
saveRDS(keep.list,out.file);
#sink();
}
}
library(Matrix);library(tidyverse)
library(ggplot2);library(gridExtra)
library(RColorBrewer)
topn.list=c(0.005,0.01,0.05,0.1,0.3,0.5,0.7)
#path.in='../02.coexpr_net/brain_scRNA-seq/bigScale2_coexpr/';
#path='./brain_scRNA-seq_bigScale2/';
#path.in='../03.coexpr_net/brain_scRNA-seq/pearson_coexpr/';
#path='./brain_scRNA-seq/';
path.in='../03.coexpr_net/brain_snRNA-seq_n5c0.05/bigScale2_coexpr/';
path='./brain_snRNA-seq_n5c0.05_bigScale2/'
dir.create(path)
# collect bigscale output nets
(files=Sys.glob(paste0(path.in,'/*.rds')))
# plot pearson.corr.coeff distribution for each cell type
# use different top percentile cutoffs on absolute values of pearson.cor.matrix
# to get cell type-specific gene co-expression networks
library(Matrix);library(tidyverse)
library(ggplot2);library(gridExtra)
library(RColorBrewer)
topn.list=c(0.005,0.01,0.05,0.1,0.3,0.5,0.7)
#path.in='../02.coexpr_net/brain_scRNA-seq/bigScale2_coexpr/';
#path='./brain_scRNA-seq_bigScale2/';
#path.in='../02.coexpr_net/brain_scRNA-seq/pearson_coexpr/';
#path='./brain_scRNA-seq/';
path.in='../02.coexpr_net/brain_snRNA-seq_n5c0.05/bigScale2_coexpr/';
path='./brain_snRNA-seq_n5c0.05_bigScale2/'
dir.create(path)
# collect bigscale output nets
(files=Sys.glob(paste0(path.in,'/*.rds')))
cor.list=list()
for(i in 1:length(files)){
filename=files[i]
x=strsplit(basename(filename),'\\_|.rds')[[1]]
sex=x[3]
cell.cluster=x[4]
cat('cell.cluster',sex,cell.cluster,'\n')
name=paste0(sex,'_',cell.cluster)
Dp=readRDS(files[i])
cor.list[[name]]<-Dp;
cat('cell.type',name,'is done\n')
}
sapply(cor.list,dim)
# get the the corresponding abs(pearson.cor.coeff) value for each top percentile cutoff
# save result in a data.frame: cell.type, topN, cutoff.value, ngene, nedge
# one data.frame for one cell.type
names(cor.list)
for(cutoff in topn.list){
(out.file=paste0(path,'/top_',cutoff,'_networks_cutoff_cell.type.rds'))
topn.out=c();
if(!file.exists(out.file)){
keep.list=list();
for(cell.type in names(cor.list)){
## remember it's absolute pearson.cor.coeff values
#abs.cor=abs(cor2.list[[cell.type]])
abs.cor=abs(cor.list[[cell.type]])
abs.cor[is.na(abs.cor)]=0;
all.cor=abs.cor[upper.tri(abs.cor)]
all.ngene=nrow(abs.cor);
all.nedge=length(all.cor);
(cutoff.value=quantile(all.cor,1-cutoff))
#(cutoff.value=sort(all.cor,decreasing = T)[cutoff])
cat('cell.type',cell.type,'top',cutoff,'value',cutoff.value,'\n')
tmp=abs.cor
tmp[abs.cor>=cutoff.value]=1;
tmp[abs.cor<cutoff.value]=0;
keep.list[[cell.type]]=tmp;
diag(tmp)=0
gene.degree=apply(tmp,1,sum)
ngene=length(gene.degree)-sum(gene.degree==0)
nedge=sum(tmp)/2 #symmetric matrix
#cell.type, topN, cutoff.value, ngene, nedge
x=c(cell.type,all.ngene,all.nedge,cutoff,cutoff.value,ngene,nedge);
topn.out=rbind(topn.out,x);
}
colnames(topn.out)=c('cell.type','all.ngene','all.nedge','topN.cutoff','cutoff.value','ngene','nedge')
write.table(topn.out,paste0(path,'/top_',cutoff,"_cor.value.txt"),quote=F,row.names = F)
saveRDS(keep.list,out.file);
#sink();
}
}
# plot pearson.corr.coeff distribution for each cell type
# use different top percentile cutoffs on absolute values of pearson.cor.matrix
# to get cell type-specific gene co-expression networks
library(Matrix);library(tidyverse)
library(ggplot2);library(gridExtra)
library(RColorBrewer)
topn.list=c(0.005,0.01,0.05,0.1,0.3,0.5,0.7)
#path.in='../02.coexpr_net/brain_scRNA-seq/bigScale2_coexpr/';
#path='./brain_scRNA-seq_bigScale2/';
#path.in='../02.coexpr_net/brain_scRNA-seq/pearson_coexpr/';
#path='./brain_scRNA-seq_PCC/';
path.in='../02.coexpr_net/brain_snRNA-seq_n5c0.05/bigScale2_coexpr/';
path='./brain_snRNA-seq_n5c0.05_bigScale2/'
#path.in='../02.coexpr_net/brain_snRNA-seq_n5c0.05/pearson_coexpr/';
#path='./brain_snRNA-seq_n5c0.05_PCC/'
dir.create(path)
# collect bigscale output nets
(files=Sys.glob(paste0(path.in,'/*.rds')))
cor.list=list()
for(i in 1:length(files)){
filename=files[i]
x=strsplit(basename(filename),'\\_|.rds')[[1]]
sex=x[3]
cell.cluster=x[4]
cat('cell.cluster',sex,cell.cluster,'\n')
name=paste0(sex,'_',cell.cluster)
Dp=readRDS(files[i])
cor.list[[name]]<-Dp;
cat('cell.type',name,'is done\n')
}
sapply(cor.list,dim)
# get the the corresponding abs(pearson.cor.coeff) value for each top percentile cutoff
# save result in a data.frame: cell.type, topN, cutoff.value, ngene, nedge
# one data.frame for one cell.type
names(cor.list)
for(cutoff in topn.list){
(out.file=paste0(path,'/top_',cutoff,'_networks_cutoff_cell.type.rds'))
topn.out=c();
if(!file.exists(out.file)){
keep.list=list();
for(cell.type in names(cor.list)){
## remember it's absolute pearson.cor.coeff values
#abs.cor=abs(cor2.list[[cell.type]])
abs.cor=abs(cor.list[[cell.type]])
abs.cor[is.na(abs.cor)]=0;
all.cor=abs.cor[upper.tri(abs.cor)]
all.ngene=nrow(abs.cor);
all.nedge=length(all.cor);
(cutoff.value=quantile(all.cor,1-cutoff))
#(cutoff.value=sort(all.cor,decreasing = T)[cutoff])
cat('cell.type',cell.type,'top',cutoff,'value',cutoff.value,'\n')
tmp=abs.cor
tmp[abs.cor>=cutoff.value]=1;
tmp[abs.cor<cutoff.value]=0;
keep.list[[cell.type]]=tmp;
diag(tmp)=0
gene.degree=apply(tmp,1,sum)
ngene=length(gene.degree)-sum(gene.degree==0)
nedge=sum(tmp)/2 #symmetric matrix
#cell.type, topN, cutoff.value, ngene, nedge
x=c(cell.type,all.ngene,all.nedge,cutoff,cutoff.value,ngene,nedge);
topn.out=rbind(topn.out,x);
}
colnames(topn.out)=c('cell.type','all.ngene','all.nedge','topN.cutoff','cutoff.value','ngene','nedge')
write.table(topn.out,paste0(path,'/top_',cutoff,"_cor.value.txt"),quote=F,row.names = F)
saveRDS(keep.list,out.file);
#sink();
}
}
setwd("~/Documents/fly.brain_core.module/02.coexpr_net")
path.in='brain_scRNA-seq_n15c0.005/'
# collect bigscale output nets
(files=Sys.glob(paste0(path.in,'/*.rds')))
# collect bigscale output nets
(files=Sys.glob(paste0(path.in,'bigScale2_coexpr/*.rds')))
file=files[1]
# collect bigscale output nets
(files=Sys.glob(paste0(path.in,'bigScale2_coexpr/*.rds')))
x=readRDS(file);
dim(x$Dp.mat)
cat(file,dim(x$Dp.mat))
for(file in files){
x=readRDS(file);
cat(basename(file),dim(x$Dp.mat),'\n')
}
(files=Sys.glob(paste0(path.in,'bigScale2_coexpr/*.rds')))
for(file in files){
x=readRDS(file);
if(nrow(x$Dp.mat)!=2088){
cat(basename(file),dim(x$Dp.mat),'\n')
}
}
# collect bigscale output nets
(files=Sys.glob(paste0(path.in,'bigScale2_coexpr/*.rds')))
for(file in files){
x=readRDS(file);
if(nrow(x$Dp.mat)!=2088){
cat(basename(file),dim(x$Dp.mat),'\n')
}
}
path.in
path.in='brain_snRNA-seq_n15c0.005/'
# collect bigscale output nets
(files=Sys.glob(paste0(path.in,'bigScale2_coexpr/*.rds')))
file=files[1]
x=readRDS(file);
x
nrow(x$Dp.mat)
file=files[3]
x=readRDS(file);
x=readRDS('../00.data_preprocess/brain_scRNA-seq_n15c0.005/all_common_genes.rds')
length(x$common.genes)
x=readRDS('../00.data_preprocess/brain_snRNA-seq_n15c0.005/all_common_genes.rds')
length(x$common.genes)
for(file in files){
x=readRDS(file);
if(nrow(x$Dp.mat)!=842){
cat(basename(file),dim(x$Dp.mat),'\n')
}
}
(files=Sys.glob(paste0(path.in,'bigScale2_coexpr/*.rds')))
for(file in files){
x=readRDS(file);
if(nrow(x$Dp.mat)!=842){
cat(basename(file),dim(x$Dp.mat),'\n')
# delete another file
file.remove(file)
}
}
for(file in files){
x=readRDS(file);
if(nrow(x$Dp.mat)!=842){
cat(basename(file),dim(x$Dp.mat),'\n')
# delete another file
file.remove(file)
}
}
# collect bigscale output nets
(files=Sys.glob(paste0(path.in,'bigScale2_coexpr/*.rds')))
for(file in files){
x=readRDS(file);
if(nrow(x$Dp.mat)!=842){
cat(basename(file),dim(x$Dp.mat),'\n')
# delete another file
file.remove(file)
}
}
# plot pearson.corr.coeff distribution for each cell type
# use different top percentile cutoffs on absolute values of pearson.cor.matrix
# to get cell type-specific gene co-expression networks
library(Matrix);library(tidyverse)
library(ggplot2);library(gridExtra)
library(RColorBrewer)
topn.list=c(0.005,0.01,0.05,0.1,0.3,0.5,0.7)
#path.in='../02.coexpr_net/brain_scRNA-seq_n15c0.005/bigScale2_coexpr/';
#path='./brain_scRNA-seq_n15c0.005_bigScale2/';
path.in='../02.coexpr_net/brain_snRNA-seq_n15c0.005/bigScale2_coexpr/';
path='./brain_snRNA-seq_n15c0.005_bigScale2/'
dir.create(path)
# collect bigscale output nets
(files=Sys.glob(paste0(path.in,'bigScale2_coexpr/*.rds')))
for(file in files){
x=readRDS(file);
if(nrow(x$Dp.mat)!=842){
cat(basename(file),dim(x$Dp.mat),'\n')
# delete another file
file.remove(file)
}
}
# construct pairwise gene Pearson's correlation matrix for each cell type
# the bigScale2 algorithm was published in: Iacono, Giovanni, Ramon Massoni-Badosa, and Holger Heyn. "Single-cell transcriptomics unveils gene regulatory network plasticity." Genome biology 20, no. 1 (2019): 1-20.
# the source code can be found: https://github.com/iaconogi/bigSCale2
# I modify the original 'Functions.R' script to output and save Pearson's correlation matrix.
source('../modify_bigScale2/ming-Functions.R')
library(Seurat)
library(tidyverse)
library(Matrix);
library(ggplot2);library(gridExtra)
library(RColorBrewer)
#genes=readRDS('../00.data_preprocess/brain_scRNA-seq_n15c0.005/all_common_genes.rds')
genes=readRDS('../00.data_preprocess/brain_snRNA-seq_n15c0.005/all_common_genes.rds')
common.genes=genes$common.genes
#out.dir1='brain_scRNA-seq/';
#out.dir1='brain_scRNA-seq_n15c0.005/';
out.dir1='brain_snRNA-seq_n15c0.005/';
if(!dir.exists(out.dir1)) dir.create(out.dir1)
out.dir=paste0(out.dir1,'/bigScale2_coexpr/');
if(!dir.exists(out.dir)) dir.create(out.dir)
## read in processed wholebrain data
if(length(grep('sn',out.dir1))==1){
file="../../single.cell_datasets/FCA_head/whole_head_filtered_valid.rds";
}else{
file="../../single.cell_datasets/fly.brain.atlas/wholebrain_filtered_valid.rds";
}
dat=readRDS(file);
df.expr=dat@assays$RNA@data
## separate female and male, select cell clusters that contain>=500cells in both sexes
min.cell=200;max.cell=Inf; #separate sex
i=apply(table(dat$sex,dat$annotation),2,function(i)sum(i>=min.cell & i<max.cell))
#pick.cell.clusters=names(which(i==2))
pick.cell.clusters=names(which(i>=1))
pick.cell.clusters # cell_100: sn,54; sc,60.
dat=subset(dat,annotation %in% pick.cell.clusters)
df.expr=dat@assays$RNA@counts;
dim(df.expr); #sn:12602 50588
sparsity=sum(df.expr==0)/nrow(df.expr)/ncol(df.expr)
cat(out.dir,sparsity,'\n') #sn=0.9537,sc=0.9055
## network construction begin
## effective.expressed.gene >=1umi in max(10,ncell*10%) cells
for(i.sex in c('male','female')){
for(i.cluster in pick.cell.clusters){
mat=df.expr[,dat$sex==i.sex & dat$annotation==i.cluster]
if(ncol(mat)<min.cell){next}
gene.filter=rownames(mat) %in% common.genes;
mat=mat[gene.filter,]
ncell=ncol(mat)
i.cluster2=gsub('\\/','\\.',i.cluster)#there is _ and -, use . to replace /
out.file=paste0(out.dir,'/ncell_',ncell,'_',i.sex,'_',i.cluster2,'_pearson.rds')
if(!file.exists(out.file)){
# two things enter next stage
gene.names=rownames(mat) #vector
expr.data=mat #dgCMatrix geneXcell
net.out=compute.network(expr.data = expr.data,gene.names = gene.names,
clustering='recursive',speed.preset = "fast")
#Dp=net.out$Dp.mat;
#Ds=net.out$Ds.mat;
saveRDS(net.out,out.file);
}
cat('cell.cluster',i.cluster,'done\n')
}
}
## read in raw data
file="../../single.cell_datasets/fly.brain.atlas/wholebrain_filtered_valid.rds";
dat=readRDS(file);
df.expr=dat@assays$RNA@data
getwd()
## read in raw data
file="../../single.cell_datasets/fly.brain.atlas/wholebrain_filtered_valid.rds";
dat=readRDS(file);
getwe()
getwd()

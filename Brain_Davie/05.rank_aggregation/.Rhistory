ylim(0,0.5)+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=16),
axis.text.x=element_text(angle=45,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
pdf(paste0(out.file,'.pdf'),height = 9)
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
ylim(0,0.5)+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=16),
axis.text.x=element_text(angle=45,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
print( ggplot(df.out.sparse,aes(x=sparsity,y=ncell))+
geom_point()+theme_classic()+
scale_x_log10()+scale_y_log10()+
ylab('ncell')
)
dev.off()
# sc, male_32 sparsity > 50%
# sn, all sparsity < 50%
if(F){
#df.out.sparse[grep('^male_5|^male_32|female_Ensheathing|female_Astrocyte',df.out.sparse$name),]
i=c(order(df.out.sparse$sparsity,decreasing = T)[1:3],
order(df.out.sparse$sparsity,decreasing = F)[1:3]);
j=c(order(df.out.sparse$ncell,decreasing = T)[1:3],
order(df.out.sparse$ncell,decreasing = F)[1:3]);
tmp=df.out.sparse[c(i,j),];
tmp$class=c(rep('most.sparse',3),rep('least.sparse',3),
rep('most.cell',3),rep('least.cell',3))
saveRDS(tmp,'test_cell.types.rds')
}
pdf(paste0(out.file,'.pdf'),height = 12,width = 10)
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
ylim(0,0.5)+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=16),
axis.text.x=element_text(angle=45,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
print( ggplot(df.out.sparse,aes(x=sparsity,y=ncell))+
geom_point()+theme_classic()+
scale_x_log10()+scale_y_log10()+
ylab('ncell')
)
dev.off()
pdf(paste0(out.file,'.pdf'),height = 12,width = 12)
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
ylim(0,0.5)+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=16),
axis.text.x=element_text(angle=0,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
print( ggplot(df.out.sparse,aes(x=sparsity,y=ncell))+
geom_point()+theme_classic()+
scale_x_log10()+scale_y_log10()+
ylab('ncell')
)
dev.off()
pdf(paste0(out.file,'.pdf'),height = 14,width = 12)
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
ylim(0,0.5)+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=16),
axis.text.x=element_text(size=16,angle=0,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
print( ggplot(df.out.sparse,aes(x=sparsity,y=ncell))+
geom_point()+theme_classic()+
scale_x_log10()+scale_y_log10()+
ylab('ncell')
)
dev.off()
pdf(paste0(out.file,'.pdf'),height = 14,width = 12)
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
ylim(0,0.5)+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=15),
axis.text.x=element_text(size=16,angle=0,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
print( ggplot(df.out.sparse,aes(x=sparsity,y=ncell))+
geom_point()+theme_classic()+
scale_x_log10()+scale_y_log10()+
ylab('ncell')
)
dev.off()
pdf(paste0(out.file,'.pdf'),height = 15,width = 12)
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
ylim(0,0.5)+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=15),
axis.text.x=element_text(size=16,angle=0,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
print( ggplot(df.out.sparse,aes(x=sparsity,y=ncell))+
geom_point()+theme_classic()+
scale_x_log10()+scale_y_log10()+
ylab('ncell')
)
dev.off()
pdf(paste0(out.file,'.pdf'),height = 15,width = 12)
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
ylim(0,0.5)+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=15),
axis.text.x=element_text(size=17,angle=0,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
print( ggplot(df.out.sparse,aes(x=sparsity,y=ncell))+
geom_point()+theme_classic()+
scale_x_log10()+scale_y_log10()+
ylab('ncell')
)
dev.off()
setwd("~/Documents/fly.brain_core.module/06.rank_aggregation")
# calculate RankAggreg for edges in absent cell clusters
options(stringsAsFactors = F)
library(igraph)
library(Matrix);
library(RobustRankAggreg)
library(parallel)
sample.nedge=100;
#edge.groups=seq(1,6
# read in networks at different cutoffs to edge commonality distribution
#(files=Sys.glob('../03.top.perc_net/brain_scRNA-seq_n15c0.005_bigScale2/top_*_networks_cutoff_cell.type.rds'))
(files=Sys.glob('../03.top.perc_net/brain_snRNA-seq_n15c0.005_bigScale2/top_*_networks_cutoff_cell.type.rds'))
topK='top_0.05';
(file=files[grep(topK,files)]) # top 0.05
#out.dir0=paste0('brain_scRNA-seq_n15c0.005_bigScale2_',topK,'/');
out.dir0=paste0('brain_snRNA-seq_n15c0.005_bigScale2_',topK,'/');
dir.create(out.dir0);
output.dir=paste0(out.dir0,'/result_RAA_sub.mat');
dir.create(output.dir)
# calculate RankAggreg for edges in absent cell clusters
options(stringsAsFactors = F)
library(igraph)
library(Matrix);
library(RobustRankAggreg)
library(parallel)
sample.nedge=100;
#edge.groups=seq(1,69,2) #on server, 3groups, 4hr
edge.groups=c(1,seq(33,69,2)) #on server, 3groups, 4hr
n.core=length(edge.groups);
# read in networks at different cutoffs to edge commonality distribution
#(files=Sys.glob('../03.top.perc_net/brain_scRNA-seq_n15c0.005_bigScale2/top_*_networks_cutoff_cell.type.rds'))
(files=Sys.glob('../03.top.perc_net/brain_snRNA-seq_n15c0.005_bigScale2/top_*_networks_cutoff_cell.type.rds'))
topK='top_0.05';
(file=files[grep(topK,files)]) # top 0.05
#out.dir0=paste0('brain_scRNA-seq_n15c0.005_bigScale2_',topK,'/');
out.dir0=paste0('brain_snRNA-seq_n15c0.005_bigScale2_',topK,'/');
dir.create(out.dir0);
output.dir=paste0(out.dir0,'/result_RAA_sub.mat');
dir.create(output.dir)
# read in edge abs PCC value for each cell type, this may take some time
cor.rank.list=readRDS(paste0(out.dir0,'cor.rank.list.rds')); #output of `01.rank_aggregation_all.33.celltypes.R`
cor.rank.df=Reduce(`rbind`,cor.rank.list)
dim(cor.rank.df) #120 417241 # #cluster X #edge
rownames(cor.rank.df)=names(cor.rank.list)
rm('cor.rank.list')
(cutoff=strsplit(basename(file),'\\_')[[1]][[2]])
# get edge 0/1 binary pattern across cell types
(outfile=paste0(out.dir0,'/top_',cutoff,'_edge_in.cell.types.rds'));
if(!file.exists(outfile)){
keep.list=readRDS(file);
#isSymmetric(keep.list[[1]]) #TRUE
edge.list=lapply(keep.list,function(Dp){
ind <- which(upper.tri(Dp, diag = F), arr.ind = TRUE)
nn <- dimnames(Dp)
tmp=data.frame(row = nn[[1]][ind[, 1]],
col = nn[[2]][ind[, 2]],
val = Dp[ind])
tmp
})
sapply(edge.list,dim)
saveRDS(edge.list,outfile)
}else{
edge.list=readRDS(outfile);
}
cat('begin RAA\n');
# for each edge, select cell types it is absent, get their abs.PCC values, aggregate
names(edge.list) #cell.type names
#sum(edge.list[[1]][,3]) # number.of.edges with the topK cutoff in this cell cluster
tmp=edge.list[[1]]
edges <- do.call(paste, c(tmp[ , 1:2 ], sep=";")) #much faster
values=lapply(edge.list, '[',,3) #extract the 1st column in each list matrix member
val.mat=Reduce(`cbind`,values)
dim(val.mat)
rownames(val.mat)=edges #edge names
colnames(val.mat)=names(edge.list) #cell type names
commonality=apply(val.mat,1,sum)
max(commonality)
length(commonality)
commonality
table(commonality)
getwd()
## upset plot: https://jokergoo.github.io/ComplexHeatmap-reference/book/upset-plot.html
options(stringsAsFactors = F)
library(igraph)
library(Matrix);
library(ggplot2);library(gridExtra)
library(ggpubr)
library(tidyverse)
library(RColorBrewer)
library(ComplexHeatmap)
#file='./brain_scRNA-seq_n15c0.005_bigScale2_top_0.05/cor.rank.list.rds'
file='./brain_snRNA-seq_n15c0.005_bigScale2_top_0.05/cor.rank.list.rds'
cor.rank.list=readRDS(file); #read in list is fast
length(cor.rank.list) #sc 67
sapply(cor.rank.list,length); #ranked edges in each cluster
# edge presence/absence across cell clusters
#edge.list=readRDS('./brain_scRNA-seq_n15c0.005_bigScale2_top_0.05/top_0.05_edge_in.cell.types.rds');
edge.list=readRDS('./brain_snRNA-seq_n15c0.005_bigScale2_top_0.05/top_0.05_edge_in.cell.types.rds');
length(edge.list); #numebr of cell clusters
sapply(edge.list,dim) #all have the same row
tmp=edge.list[[1]]
edges <- do.call(paste, c(tmp[ , 1:2 ], sep=";")) #much faster
values=lapply(edge.list, '[',,3) #extract the 1st column in each list matrix member
val.mat=Reduce(`cbind`,values)
dim(val.mat)
rownames(val.mat)=edges
colnames(val.mat)=names(edge.list)
commonality=apply(val.mat,1,sum)
max(commonality) #sc 64
length(commonality) #2178828 number of edges per network
#edge.i=43;sample.nedge.for.this.group=100;
edge.i=35;sample.nedge.for.this.group=100;
#edge.group=val.mat[commonality==edge.i,,drop=F]
edge.group=val.mat[commonality>=edge.i,,drop=F]
dim(edge.group) #0/1 binary matrix, n.edge X n.cell.cluster
# replace 0/1 with rank or quantile number
rownames(edge.group) #edge names: gene1;gene2
head(cor.rank.list[[1]]) #the same name convention
out=lapply(1:length(cor.rank.list),function(i){
x=cor.rank.list[[i]]
y=((1:length(x))-1)/(length(x)-1);
names(y)=x;
y[rownames(edge.group)]
})
df.out=as.data.frame(Reduce(`cbind`,out))
dim(df.out) #100edge x 67 cell cluster
colnames(df.out)=colnames(edge.group)
rownames(df.out)=rownames(edge.group)
my.breaks <- seq(0, 1, by=0.01)
my.colors <- colorRampPalette(colors = c("blue4", "white"))(length(my.breaks))
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
fontsize_row = 16, fontsize_col=12);
edge.i
#pdf(paste0('./sc_top0.05_edge_',edge.i,'.pdf'),width=30,height = 16)
pdf(paste0('./sn_top0.05_edge_',edge.i,'.pdf'),width=30,height = 16)
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
fontsize_row = 16, fontsize_col=12);
#treeheight_row = 0, treeheight_col = 0 )
dev.off()
#pdf(paste0('./sc_top0.05_edge_',edge.i,'.pdf'),width=30,height = 16)
pdf(paste0('./sn_top0.05_edge_',edge.i,'.pdf'),width=20,height = 16)
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
fontsize_row = 16, fontsize_col=12);
#treeheight_row = 0, treeheight_col = 0 )
dev.off()
#pdf(paste0('./sc_top0.05_edge_',edge.i,'.pdf'),width=30,height = 16)
pdf(paste0('./sn_top0.05_edge_',edge.i,'.pdf'),width=24,height = 16)
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
fontsize_row = 16, fontsize_col=20);
#treeheight_row = 0, treeheight_col = 0 )
dev.off()
#pdf(paste0('./sc_top0.05_edge_',edge.i,'.pdf'),width=30,height = 16)
pdf(paste0('./sn_top0.05_edge_',edge.i,'.pdf'),width=22,height = 18)
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
fontsize_row = 16, fontsize_col=20);
#treeheight_row = 0, treeheight_col = 0 )
dev.off()
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
cellheight=3, cellwidth = 3,
fontsize_row = 16, fontsize_col=20);
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
cellheight=0, cellwidth = 0,
fontsize_row = 16, fontsize_col=20);
#pdf(paste0('./sc_top0.05_edge_',edge.i,'.pdf'),width=30,height = 16)
pdf(paste0('./sn_top0.05_edge_',edge.i,'.pdf'),width=22,height = 24)
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
fontsize_row = 16, fontsize_col=20);
#treeheight_row = 0, treeheight_col = 0 )
dev.off()
#pdf(paste0('./sc_top0.05_edge_',edge.i,'.pdf'),width=30,height = 16)
pdf(paste0('./sn_top0.05_edge_',edge.i,'.pdf'),width=22,height = 30)
#pdf(paste0('./sc_top0.05_edge_',edge.i,'.pdf'),width=30,height = 16)
pdf(paste0('./sn_top0.05_edge_',edge.i,'.pdf'),width=30,height = 18)
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
fontsize_row = 16, fontsize_col=20);
#treeheight_row = 0, treeheight_col = 0 )
dev.off()
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
fontsize_row = 16, fontsize_col=20);
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
fontsize_row = 16, fontsize_col=20);
dev.off()
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
fontsize_row = 16, fontsize_col=20);
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
legend=F,
fontsize_row = 16, fontsize_col=20);
#pdf(paste0('./sc_top0.05_edge_',edge.i,'.pdf'),width=30,height = 16)
pdf(paste0('./sn_top0.05_edge_',edge.i,'.pdf'),width=22,height = 18)
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
legend=F,
fontsize_row = 16, fontsize_col=20);
#treeheight_row = 0, treeheight_col = 0 )
dev.off()
#pdf(paste0('./sc_top0.05_edge_',edge.i,'.pdf'),width=30,height = 16)
pdf(paste0('./sn_top0.05_edge_',edge.i,'.pdf'),width=26,height = 18)
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
legend=F,
fontsize_row = 16, fontsize_col=20);
#treeheight_row = 0, treeheight_col = 0 )
dev.off()
#pdf(paste0('./sc_top0.05_edge_',edge.i,'.pdf'),width=30,height = 16)
pdf(paste0('./sn_top0.05_edge_',edge.i,'.pdf'),width=26,height = 18)
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
legend=F,
fontsize_row = 12, fontsize_col=14);
#treeheight_row = 0, treeheight_col = 0 )
dev.off()
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
legend=F,
fontsize_row = 10, fontsize_col=12);
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
legend=F,
fontsize_row = 8, fontsize_col=10);
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
legend=F,
fontsize_row = 6, fontsize_col=8);
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
legend=F,
fontsize_row = 5, fontsize_col=8);
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
legend=F,
fontsize_row = 5, fontsize_col=7);
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
legend=T,
fontsize_row = 5, fontsize_col=7);
#pdf(paste0('./sc_top0.05_edge_',edge.i,'.pdf'),width=30,height = 16)
pdf(paste0('./sn_top0.05_edge_',edge.i,'.pdf'),width=26,height = 18)
pheatmap(t(df.out),
color = my.colors,
breaks = my.breaks,
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method='ward.D2',
legend=T,
fontsize_row = 5, fontsize_col=7);
#treeheight_row = 0, treeheight_col = 0 )
dev.off()
if(F){
gplots::heatmap.2(t(df.out),
#scale='column',
scale='none',
#cellnote = my.df,  # same data set for cell labels
notecol="black",      # change font color of cell labels to black
main = paste(nrow(edge.group),'edges at edge',i), # heat map title
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(20,20),  # ("margin.Y", "margin.X"), give space for names
#col=my_palette,       # use on color palette defined earlier
col=c('white','blue'),
#dendrogram="row",     # only draw a row dendrogram
dendrogram="both",
Rowv=T,Colv=T)
}

setwd("~/Documents/fly.brain_core.module/cocaine_fly.brain/chooseT")
input.folder='../brain_scRNA-seq_n15c0.005/'
library(Seurat)
## read in genes
genes=readRDS(paste0(input.folder,'all_common_genes.rds'))
c.genes=unlist(genes$genes)
all.genes=genes$all.genes
common.genes=genes$common.genes
length(common.genes)
## read in processed wholebrain data
file='../../../single.cell_datasets/fly.brain_Cocaine/Brain.control_filtered.rds'
dat=readRDS(file);
df.expr=dat@assays$RNA@counts
out.dir=paste0('common.genes_',basename(input.folder),'/');
out.dir
dir.create(out.dir)
for(sex in c('female','male')){
for(cell.type in pick.cell.clusters){
mat=df.expr[, dat$annotation==cell.type & dat$sex==sex] #sc
mat=mat[gene.names,]
dim(mat)  #2876 2023;
mat.count=mat
#set.seed(13579)
#i=sample(1:ncol(mat),replace = F)
#mat=mat[,i]
## if you want to use scran to normalize data
if(T){
#https://bioconductor.org/packages/devel/bioc/vignettes/scran/inst/doc/scran.html
library(scran)
sce <- SingleCellExperiment(list(counts=mat),
colData=DataFrame(cell.type=rep(cell.type,ncol(mat)),sex=sex),
rowData=DataFrame(gene=rownames(mat)) )
sce
clusters <- quickCluster(sce)
sce <- computeSumFactors(sce, clusters=clusters)
summary(sizeFactors(sce))
sce <- logNormCounts(sce)
log.sce=sce@assays@data$logcounts
dim(log.sce)
sum(mat==0) #the same number of 0
sum(log.sce==0) #the same number of 0
mat.scran=log.sce
}
class(mat.scran);
class(mat.count);
ncell=ncol(mat.scran);
cell.type2=gsub('\\/','\\.',cell.type)#there is _ and -, use . to replace /
out.file=paste0(out.dir,'/ncell_',ncell,'_',sex,'_',cell.type2,'.rds')
saveRDS(list(mat.count=mat.count,mat.scran=mat.scran),
file=out.file)
}
}
for(sex in c('female','male')){
for(cell.type in unique(dat$annotation)){
mat=df.expr[, dat$annotation==cell.type & dat$sex==sex] #sc
mat=mat[gene.names,]
dim(mat)  #2876 2023;
mat.count=mat
#set.seed(13579)
#i=sample(1:ncol(mat),replace = F)
#mat=mat[,i]
## if you want to use scran to normalize data
if(T){
#https://bioconductor.org/packages/devel/bioc/vignettes/scran/inst/doc/scran.html
library(scran)
sce <- SingleCellExperiment(list(counts=mat),
colData=DataFrame(cell.type=rep(cell.type,ncol(mat)),sex=sex),
rowData=DataFrame(gene=rownames(mat)) )
sce
clusters <- quickCluster(sce)
sce <- computeSumFactors(sce, clusters=clusters)
summary(sizeFactors(sce))
sce <- logNormCounts(sce)
log.sce=sce@assays@data$logcounts
dim(log.sce)
sum(mat==0) #the same number of 0
sum(log.sce==0) #the same number of 0
mat.scran=log.sce
}
class(mat.scran);
class(mat.count);
ncell=ncol(mat.scran);
cell.type2=gsub('\\/','\\.',cell.type)#there is _ and -, use . to replace /
out.file=paste0(out.dir,'/ncell_',ncell,'_',sex,'_',cell.type2,'.rds')
saveRDS(list(mat.count=mat.count,mat.scran=mat.scran),
file=out.file)
}
}
gene.names=common.genes;
length(common.genes) #1738
for(sex in c('female','male')){
for(cell.type in unique(dat$annotation)){
mat=df.expr[, dat$annotation==cell.type & dat$sex==sex] #sc
mat=mat[gene.names,]
dim(mat)  #2876 2023;
mat.count=mat
#set.seed(13579)
#i=sample(1:ncol(mat),replace = F)
#mat=mat[,i]
## if you want to use scran to normalize data
if(T){
#https://bioconductor.org/packages/devel/bioc/vignettes/scran/inst/doc/scran.html
library(scran)
sce <- SingleCellExperiment(list(counts=mat),
colData=DataFrame(cell.type=rep(cell.type,ncol(mat)),sex=sex),
rowData=DataFrame(gene=rownames(mat)) )
sce
clusters <- quickCluster(sce)
sce <- computeSumFactors(sce, clusters=clusters)
summary(sizeFactors(sce))
sce <- logNormCounts(sce)
log.sce=sce@assays@data$logcounts
dim(log.sce)
sum(mat==0) #the same number of 0
sum(log.sce==0) #the same number of 0
mat.scran=log.sce
}
class(mat.scran);
class(mat.count);
ncell=ncol(mat.scran);
cell.type2=gsub('\\/','\\.',cell.type)#there is _ and -, use . to replace /
out.file=paste0(out.dir,'/ncell_',ncell,'_',sex,'_',cell.type2,'.rds')
saveRDS(list(mat.count=mat.count,mat.scran=mat.scran),
file=out.file)
}
}
for(sex in c('female','male')){
for(cell.type in unique(dat$annotation)){
mat=df.expr[, dat$annotation==cell.type & dat$sex==sex] #sc
mat=mat[gene.names,]
dim(mat)  #2876 2023;
mat.count=mat
#set.seed(13579)
#i=sample(1:ncol(mat),replace = F)
#mat=mat[,i]
## if you want to use scran to normalize data
if(F){
#https://bioconductor.org/packages/devel/bioc/vignettes/scran/inst/doc/scran.html
library(scran)
sce <- SingleCellExperiment(list(counts=mat),
colData=DataFrame(cell.type=rep(cell.type,ncol(mat)),sex=sex),
rowData=DataFrame(gene=rownames(mat)) )
sce
clusters <- quickCluster(sce)
sce <- computeSumFactors(sce, clusters=clusters)
summary(sizeFactors(sce))
sce <- logNormCounts(sce)
log.sce=sce@assays@data$logcounts
dim(log.sce)
sum(mat==0) #the same number of 0
sum(log.sce==0) #the same number of 0
mat.scran=log.sce
}
#class(mat.scran);
class(mat.count);
ncell=ncol(mat.count);
cell.type2=gsub('\\/','\\.',cell.type)#there is _ and -, use . to replace /
out.file=paste0(out.dir,'/ncell_',ncell,'_',sex,'_',cell.type2,'.rds')
#saveRDS(list(mat.count=mat.count,mat.scran=mat.scran),file=out.file)
saveRDS(list(mat.count=mat.count),file=out.file)
}
}
library(ggplot2)
files=Sys.glob('common.genes_brain_scRNA-seq_n15c0.005/*.rds')
out.file='sc_sparsity.rds';
if(!file.exists(out.file)){
out.sparse=lapply(files,function(file){
mat.list=readRDS(file);
mat.count=as.matrix(mat.list$mat.count);
obs.sparse=sum(mat.count!=0)/nrow(mat.count)/ncol(mat.count)#0.6528626
#cat(basename(file),'obs.sparse',obs.sparse,'\n')
x=strsplit(basename(file),'\\_')[[1]]
ncell=x[2];sex=x[3];cluster=gsub('ncell_\\d*\\_|.rds','',basename(file));
c(basename(file),ncell,sex,cluster,obs.sparse)
})
df.out.sparse=as.data.frame(Reduce(`rbind`,out.sparse))
colnames(df.out.sparse)=c('cell.cluster','ncell','sex','cluster','sparsity')
df.out.sparse$ncell=as.numeric(df.out.sparse$ncell)
df.out.sparse$sparsity=as.numeric(df.out.sparse$sparsity)
#hist(df.out.sparse$sparsity)
df.out.sparse=df.out.sparse[df.out.sparse$ncell>=200,]
summary(df.out.sparse$sparsity)
df.out.sparse=df.out.sparse[order(df.out.sparse$sparsity,decreasing = T),]
saveRDS(df.out.sparse,out.file)
}
df.out.sparse=readRDS(out.file)
df.out.sparse$cluster=factor(df.out.sparse$cluster,df.out.sparse$cluster)
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
ylim(0,0.5)+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=15),
axis.text.x=element_text(size=17,angle=0,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
summary(df.out.sparse$sparsity)
pdf(paste0(out.file,'.pdf'),height = 15,width = 12)
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
ylim(0,0.5)+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=15),
axis.text.x=element_text(size=17,angle=0,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
print( ggplot(df.out.sparse,aes(x=sparsity,y=ncell))+
geom_point()+theme_classic()+
scale_x_log10()+scale_y_log10()+
ylab('ncell')
)
dev.off()
summary(df.out.sparse$sparsity)
pdf(paste0(out.file,'.pdf'),height = 15,width = 12)
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
ylim(0,0.5)+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=15),
axis.text.x=element_text(size=17,angle=0,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
print( ggplot(df.out.sparse,aes(x=sparsity,y=ncell))+
geom_point()+theme_classic()+
scale_x_log10()+scale_y_log10()+
ylab('ncell')
)
dev.off()
pdf(paste0(out.file,'.pdf'),height = 15,width = 12)
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
#ylim(0,0.5)+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=15),
axis.text.x=element_text(size=17,angle=0,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
print( ggplot(df.out.sparse,aes(x=sparsity,y=ncell))+
geom_point()+theme_classic()+
scale_x_log10()+scale_y_log10()+
ylab('ncell')
)
dev.off()
pdf(paste0(out.file,'.pdf'),height = 15,width = 12)
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
ylim(0,0.55)+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=15),
axis.text.x=element_text(size=17,angle=0,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
print( ggplot(df.out.sparse,aes(x=sparsity,y=ncell))+
geom_point()+theme_classic()+
scale_x_log10()+scale_y_log10()+
ylab('ncell')
)
dev.off()
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
ylim(0,0.55)+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=15),
axis.text.x=element_text(size=17,angle=0,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
scale_y_continuous(breaks=seq(0,0.55,0.5),labels =seq(0,0.55,0.5))+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=15),
axis.text.x=element_text(size=17,angle=0,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
scale_y_continuous(breaks=seq(0,0.55,0.05),labels =seq(0,0.55,0.05))+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=15),
axis.text.x=element_text(size=17,angle=0,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
scale_y_continuous(breaks=c(0,0.2,0.4,0.5,0.55),labels=c(0,0.2,0.4,0.5,0.55))+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=15),
axis.text.x=element_text(size=17,angle=0,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
pdf(paste0(out.file,'.pdf'),height = 15,width = 12)
print( ggplot(df.out.sparse,aes(x=cluster,y=sparsity))+
geom_bar(stat='identity',fill=NA,col='darkblue')+
scale_y_continuous(breaks=c(0,0.2,0.4,0.5,0.55),labels=c(0,0.2,0.4,0.5,0.55))+
theme_classic()+
theme(
axis.title=element_text(size=16),
axis.text.y=element_text(size=15),
axis.text.x=element_text(size=17,angle=0,vjust=1,hjust=1))+
coord_flip()+
xlab('')
)
print( ggplot(df.out.sparse,aes(x=sparsity,y=ncell))+
geom_point()+theme_classic()+
scale_x_log10()+scale_y_log10()+
ylab('ncell')
)
dev.off()
summary(df.out.sparse$sparsity)
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#0.1985  0.2800  0.3506  0.3455  0.3933  0.5264
# run on server
library(Seurat);
library(ggplot2);library(gridExtra);
library(parallel)
source('../../modify_bigScale2/ming-Functions.R')
my.method='bigscale'
prefix='sc'
files=Sys.glob('common.genes_brain_scRNA-seq_n15c0.005/*.rds')
thresholds<- c(0.7,0.9,0.95,0.99,0.995)
n.rep=10;
splitData <- function(df, colIdx,propShared=0.5){
sampleCount <- ncol(df)
#colIdx <- sample.int(sampleCount)
sharedSampleCount <- round(propShared*sampleCount)
sharedColsIdx <- 1:sharedSampleCount
specificSampleCount <- floor(0.5*(sampleCount-sharedSampleCount))
s1=sharedSampleCount+1;
e1=sharedSampleCount+1+specificSampleCount;
s2=e1+1;
e2=min(s2+specificSampleCount,sampleCount);
df1 <- df[,colIdx[c(sharedColsIdx, s1:e1) ]]
df2 <- df[,colIdx[c(sharedColsIdx, s2:e2)]]
dfList <- list(df1, df2)
return(dfList)
}
files
file=files[1]
mat.list=readRDS(file);
#mat.scran=as.matrix(mat.list$mat.scran);
mat.count=as.matrix(mat.list$mat.count);
cat('begin file',file,'\n');
splitData.mat=replicate(n.rep,sample.int(ncol(mat.count)))
library(ggplot2);library(gridExtra)
input.file='sc_sparsity.rds';
#input.file='sn_sparsity.rds';
##################################################
## read in ncell per cell type, run server
all.ncell=list();
files=Sys.glob('common.genes_brain_scRNA-seq_n15c0.005/*.rds');
#files=Sys.glob('common.genes_brain_snRNA-seq_n15c0.005/*.rds');
length(files)
for(file in files){
x=basename(file)
ncell=as.numeric(strsplit(x,'\\_')[[1]][[2]])
cell.type=gsub('ncell_\\d*_|.rds','',x)
if(ncell>=200){
all.ncell[[cell.type]]=ncell
}
}
length(all.ncell) #54
## begin plot
df.sparse=readRDS(input.file)
max(df.sparse$sparsity)
#df.sparse=df.sparse[df.sparse$sparsity<0.5,]
dim(df.sparse) #54
library(tidyverse)
library(COGENT)
out.file='sc_bigscale_rep10.rds'
!file.exists(out.file)
df=as.data.frame(readRDS(out.file))
colnames(df)=c('cell.type','rep','th','value') #correctedSimilarity
length(unique(df$cell.type))
df=df[df$cell.type %in% names(all.ncell),]
#df$th=as.numeric(df$th);
dim(df)
df$value=as.numeric(df$value);
df$threshold=factor(1- as.numeric(df$th))
df.all.sum=df %>% group_by(cell.type,th) %>%
summarise(median.ratio=median(value))
df.all.sum$threshold=factor(1-as.numeric(df.all.sum$th))
plots=list();i.plot=0;
for(cell.type in unique(df.all.sum$cell.type)){
x=df[df$cell.type==cell.type,]
x$threshold=as.numeric(as.character(x$threshold))
i.plot=i.plot+1;
plots[[i.plot]]<- ggplot(x,aes(x=threshold,y=value))+
geom_point()+
geom_smooth()+
#ggtitle("Threshold choice for gene co-expression networks") +
#scale_y_continuous("Density-adjusted consistency") +
ylab("Signal to noise score") +
theme_classic()+ylim(0,max(x$value))+
scale_x_log10("Threshold cutoff", breaks=x$threshold)+
ggtitle(cell.type)
}
p.median<- ggplot(df.all.sum,aes(x=threshold,y=median.ratio,group=cell.type))+
geom_point(size=0.5)+geom_line()+theme_classic(base_size = 20)+
ggtitle("Threshold choice for gene co-expression networks") +
#scale_y_continuous("Density-adjusted consistency") +
scale_y_continuous("Signal to noise score")+ #scale_y_log10()+
xlab("Threshold cutoff")
layout_matrix = matrix(1:16,4,4,byrow = T)
pdf('sc_bigscale_rep10.pdf',useDingbats = T,width = 12,height = 9)
#pdf('sn_bigscale_rep10.pdf',useDingbats = T)
#print(p.median);
grid.arrange(arrangeGrob(grobs= plots[1:16],layout_matrix = layout_matrix))
grid.arrange(arrangeGrob(grobs= plots[17:32],layout_matrix = layout_matrix))
grid.arrange(arrangeGrob(grobs= plots[33:48],layout_matrix = layout_matrix))
grid.arrange(arrangeGrob(grobs= plots[49:54],layout_matrix = layout_matrix))
#grid.arrange(arrangeGrob(grobs= plots[65:67],layout_matrix = layout_matrix))
dev.off()
min(subset(df.all.sum,th==0.95)$median.ratio)
##################################################
## plot score VS sparsity, run local
df.out.sparse=readRDS(input.file)
head(df.out.sparse)
print(p.median);
pdf('sc_median_bigscale_rep10.pdf',useDingbats = T,width = 12,height = 9)
print(p.median);
dev.off()
## plot score VS sparsity, run local
df.out.sparse=readRDS(input.file)
head(df.out.sparse)
head(df.all.sum)
dim(df.all.sum) #340 sc, 380 sn
sum(df.all.sum$cell.type %in% df.out.sparse$cluster)
dfc=merge(df.out.sparse,df.all.sum,by.x='cluster',by.y='cell.type')
head(dfc)
T=0.05; #sc,which threshold to use in ploting S2N score and ncell, sparsity
#T=0.1; #sn
dfc=subset(dfc,threshold==T & sparsity<0.5)
library(viridis)
# ncell ~ score
p= ggplot(dfc,aes(x=ncell,y=median.ratio))+
geom_point()+theme_classic(base_size = 20)+
scale_x_log10()+
#scale_color_viridis() +
ylab('Signal-to-Noise Score')
lm_eqn <- function(df){
m <- lm(y ~ x, df);
f <- summary(m)$fstatistic
pval <- as.numeric(pf(f[1],f[2],f[3],lower.tail=F))
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2~","~~italic(p)~"="~pval,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3),
pval = format(pval,digits=3)))
as.character(as.expression(eq));
}
df=data.frame(x=dfc$ncell,y=dfc$median.ratio)
p1=p + geom_smooth(method='lm')+
geom_text(aes(x=500,y=0.5),size=6,label = lm_eqn(df), parse = TRUE,stat = "unique")
#geom_text(aes(x=400,y=0.3),label = lm_eqn(df), parse = TRUE) #for sn
# sparsity ~ score
p.sparse= ggplot(dfc,aes(x=sparsity,y=median.ratio))+
geom_point()+theme_classic(base_size = 20)+
scale_x_log10()+
#scale_color_viridis() +
ylab('Signal-to-Noise Score')
df=data.frame(x=dfc$sparsity,y=dfc$median.ratio)
p.sparse1=p.sparse + geom_smooth(method='lm')+
geom_text(aes(x=0.3,y=0.5),size=6,label = lm_eqn(df), parse = TRUE,stat = "unique")
df2=subset(dfc,sparsity>0.3)
df=data.frame(x=df2$sparsity,y=df2$median.ratio)
p.sparse2= ggplot(df2,aes(x=sparsity,y=median.ratio))+
geom_point()+theme_classic(base_size = 20)+
scale_x_log10()+
#scale_color_viridis() +
ylab('Signal-to-Noise Score')+
geom_smooth(method='lm')+
geom_text(aes(x=0.38,y=0.3),size=6,label = lm_eqn(df), parse = TRUE,stat = "unique")
pdf(paste0(input.file,'_T',T,'_S2N.ncell.pdf'),useDingbats = T,
width = 8,height = 12)
#grid.arrange(p,p1,ncol=2)
#grid.arrange(p.sparse,p.sparse1,p.sparse2,ncol=3)
grid.arrange(p1,p.sparse1,p.sparse2,ncol=1)
dev.off()
p1=p + geom_smooth(method='lm')+
geom_text(aes(x=520,y=0.5),size=6,label = lm_eqn(df), parse = TRUE,stat = "unique")
pdf(paste0(input.file,'_T',T,'_S2N.ncell.pdf'),useDingbats = T,
width = 8,height = 12)
#grid.arrange(p,p1,ncol=2)
#grid.arrange(p.sparse,p.sparse1,p.sparse2,ncol=3)
grid.arrange(p1,p.sparse1,ncol=1)
dev.off()
